<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="org.zerock.security.CustoLoginSuccessHandler"></bean>
	<!-- <bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"></bean> -->
	<bean id="bycryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	<bean id="customUserDetailService" class="org.zerock.security.CustomUserDetailService"></bean>
	
	<security:http auto-config="true" use-expressions="true">
	
		<security:intercept-url pattern="/securitySample/all" access="permitAll"/>
		<security:intercept-url pattern="/securitySample/member" access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/securitySample/admin" access="hasRole('ROLE_ADMIN')"/>
		
		
		<!-- ex :  member유저가 admin에 접속하려고 할 때. 특정 사용자가 로그인은 했지만 uri접근권한이 없는 상황 -->
		<!-- <security:access-denied-handler error-page="/accessError"/> --> <!-- 인터페이스를 구현해서 사용하지 않는경우.-->
		<security:access-denied-handler ref="customAccessDenied"/>			<!-- 인터페이스를 구현해서 사용하는 경우. 쿠키나 세션에 작업이나 특정한 헤더 정보를 추가하는 등의 행위를 더할 수 있음.-->
		<security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess"></security:form-login>	<!-- 로그인 후 페이지핸들러 -->
		<security:logout logout-url="/customLogout" invalidate-session="true" delete-cookies="remember-me,JSESSION_ID"/>
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
	</security:http>
	<security:authentication-manager>
	
		<security:authentication-provider user-service-ref="customUserDetailService"><!-- userDetailService를 구현해서 인증권한 추가-->
		<!-- 테이블로 권한 추가 JDBC방식 -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource" 
			users-by-username-query="select userid, userpw, enabled from tbl_member where userid=?"
			authorities-by-username-query="select userid, auth from tbl_member_auth where userid=?"
			/>	 -->
			<!-- <security:password-encoder ref="customPasswordEncoder"/> -->
			<security:password-encoder ref="bycryptPasswordEncoder"/>
			
			
		<!-- XML설정로 권한 추가 XML방식-->
		<!--  <security:user-service>									
				<security:user name="member" password="member" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
			</security:user-service> -->
		
		</security:authentication-provider>
	</security:authentication-manager>
		
</beans>
